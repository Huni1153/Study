주소 문자열과 요청 파라미터 다루기
	nodejs 는 서버를 만들기 위해 생성된 언어이기 때문에 주소문자열과 요청 파라미터에 대한 핸들링이 요구된다. 웹 사이트에 접속하기 위한 사이트 주소 정보는 노드에서 URL 객체로 만들수 있다. 요청 파라미터인지 혹은 주소인지 구별하기 위해서 "?"기호를 기준으로 앞에 있는 문자열과 뒤에 있는 문자열을 분리하는 경우가 많다. 이 작업을 쉽게 해주는 모듈이 url모듈이다.

	url 모듈
		https://www.google.co.kr/?gws_rd=ssl#newwindow=1&q=actor의 문자열이 왔을때 url 모듈을 이용하여 
		protocol : https
		host : www.google.co.kr
		query : gws_rd=ssl#newwindow=1&q=actor
		...
		처럼 구분해서 저장할 수 있다.

	URL 모듈의 속성 메소드
		parse() : 주소 문자열을 파싱하여 URL 객체를 만든다.
		format() : URL 객체를 주소 문자열로 변환한다.

	url 모듈에서 query 속성은 요청파라미터 정보를 가지고 있는데, 이 정보를 잘 살펴보면 여러 개의 요청 파라미터가 모두 들어 있다. 웹 서버는 클라에서 요청한 파라미터를 받아 처리할 때가 많으므로, query속 속성을 분리해야한다. 이때 분리할때 querystring 모듈을 사용하면 쉽게 분리가 가능하다.

	querystring 모듈의 속성 메소드
		parse() : 요청 파라미터 문자열을 파싱하여 객체로 만든다.
		stringify() : 메소드는 객체 안에 들어있는 요청 파라미터를 다시 하나으 문자열로 바꾼다.

	이벤트 이해하기
		EventEmitter라는 것을 이용하여 이벤트를 보내고 받을 수 있다.

		이벤트를 보내고 받기
			노드의 객체는 EventEmitter를 상속받을 수 있으며, 상속받은 후에는 EventEmitter 객체의 on()과 emit()메소드를 사용할 수 있다.
			기본적으로 process 객체는 EventEmitter를 상속받도록 만들어져 있어서 on()과 emit() 메소드를 바로 사용할 수 있다.

	EventEmitter 모듈의 속성 메소드
		on( event, listener ) : 지정한 이벤트의 리스너를 추가한다.
		once( event, listener ) : 지정한 이벤트의 리스너를 추가하지만 한 번 실행한 후에는 자동으로 리스너가 제거된다.
		removeListener( event, listener ) : 지정한 이벤트에 대한 리스너를 제거한다.

	ch04_test1~4.js까지를 참조하여 Event에 대해 공부를 해보자
	// 상속에 대한 개념은 추후에 다시 설명하기로한다.		


파일 다루기
	js에서 파일 시스템은 파일 다루는 기능과 디렉토리를 다루는 기능으로 구성되어 있다. 동기식 / 비동기식 IO기능을 함께 제공한다. ( 동기식 IO메소드의 경우 Sync라는 단어를 붙인다. )

	파일 읽기 및 쓰기
		fs 모듈을 참조하여 내부의 동기/비동기식 읽기 메소드를 얻어온다.
		fs.readFileSync(file, encoding ) : file을 encoding으로 읽는다.
		fs.readFile( file, encoding, callback ) : file을 encoding으로 읽은 후 callback을 발생시킨다. 
		fs.writeFileSync( file, data, encoding ) : file에 data를 encoding방식으로 쓴다.
		fs.writeFile( file, data, encoding, callback ) : file에 data를 encoding 방식으로 쓴 후, callback 수행한다.

	fs 모듈의 파일 한들링 속성 메소드
		open( file, flags, mode, callback ) : 파일을 연다.
		read( fd, buffer, offset, length, position, callback ) : 지정한 부분의 파일 내용을 읽어 들인다.
		write( fd, buffer, offset, length, position, callback ) : 파일의 지정한 부분에 데이터를 쓴다.
		close( fd, callback ) : 파일을 닫아준다.
		mkdir( dict, mode, callback ) : dict라는 디렉토리를 만든다.
		rmdir( dict, callback ) : dict라는 디렉토리를 삭제한다. 

	open( file, flags, mode, callback )
		file : 파일 이름
		flags : 'w'-> 쓰기, 파일이 없으면 만들고, 있으면 내용 삭제
			'r'-> 읽기, 파일이 없으면 에러
			'w+' -> 쓰기와 읽기, 파일이 없으면 만들고, 있으면 내용 삭제
			'a+' -> 읽기와 추가에 모두 사용, 파일이 없으면 만들고 있으면 새로운 내용을 추가
		callback : err, fd를 전달 받는다. fd는 file descriptor라고 파일의 핸들을 의미한다. fd가 곧 파일 객체가 된다.

	Buffer 객체
		Buffer객체는 바이너리 데이터를 읽고 쓰는데 사용한다.
		새로운 버퍼 객체를 만들기 위해서는 new 연산자를 사용하며, 그안에 들어갈 byte 데이터의 크기만 지정한다. 문자열을 매개변수로 주게되면 해당 문자열이 들어간 Buffer 객체가 생성된다.
	
	Buffer 객체의 속성 메소드
		toString() : 버퍼 객체에 들어있는 문자열 반환
		isBuffer() : 해당 객체가 Buffer 객체인지 확인한다.
		concat([]) : 매개변수 list에 들어있는 buffer객체들을 연결한다.


stream 단위로 파일 읽고 쓰기
	데이터 단위가 아닌 스트림 단위로 처리할 수도 있다.스트림은 데이터가 전달 되는 통로와 같은 개념이다. 파일에서 읽을 때는 createReadStream(), 쓸때는 createWriteStream() 메소드로 스트림 객체를 만든 후 데이터를 읽고 쓰게 된다.

	stream 객체 속성 메소드
		createReadStream(path, options ) : 파일을 읽기 위한 스트림 객체 생성
		createWriteStream( path, options ) : 파일을 쓰기 위한 스트림 객체 생성
			options에는 flags, encoding, autoClose 속성이 들어있는 js객체를 전달할 수 있다.
		pipe() : 두개의 스트림을 붙여주는 역할을 한다.
	
	ch04_test11~12.js 를 참조하자


http 모듈로 요청 받은 파일 내용을 읽고 응답하기
	스트림을 서로 연결하는 방법은 웹 서버를 만들고 사용자의 요청을 처리할 때 유용하다. ch04_test13.js에서는 요청을 받았을때, 내용을 읽어 응답을 보내는 간단한 코드이다. 참고하자.	


	

	
로그 파일 남기기
	console객체의 log(), error() 메소드 등을 호출하면 로그를 출력할 수 있다. 프로그램의 크기가 커질수록 로그의 양도 많아지고 로그를 보관했다가 나중에 확인해야 하는 경우도 생긴다. 외장 모듈에서 log를 효율적으로 남기는 모듈이 있는데 winston 모듈을 사용할 수 있다.

