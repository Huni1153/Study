웹서비스와 같은 서버 기능을 만들 수 있는 언어나 도구들은 이미 많은데, 노드( Node.js )라는 새로운 개발 도구는 왜 또 만든 것일까?
	-> Node.js 의 강력한 비동기 입출력 방식이 이를 해결한다.

노드의 비동기 입출력 방식
	( Non-Blocking IO )
	하나의 요청 처리가 끝날 때까지 기다리지 않고 다른 요청을 동시에 처리할 수 있는 방법
	비동기 방식으로 읽는다는 것의 의미!
		-> 프로그램이 파일의 내용을 처리할 수 있는 시점이 되면 Callback함수가 호출이 되도록 등록해두면 가능하다
		-> 콜백 함수가 호출되는 시점을 이벤트발생이라고 하고 이러한 방식을 이벤트 기반 입출력( Event driven IO ) 라고 한다.

이벤트를 받는것은 어떻게 수행할까?
	-> Javascript의 on메소드를 이용하여 수행한다.
	-> on 메소드는 이벤트 명을 Callback 함수와 연결( 이것을 바인딩이라한다.)
	ex) res.on( "data", function(){ ... } );

CommonJs 표준
	-> 노드에서는 필요한 기능을 별도의 자바스크립트로 만든 후 필요할 때마다 불러올 수 있다. 그 형태는 CommonJs표준스택을 지킨다. ( 결국 파일로 모듈을 분리시킨다. )
	ex) module_1.js, module_2.js 이렇게 파일이있다면, var module1 = require( "module_1" ); 으로 module_1.js의 독립된 모듈의 기능을 사용하게 된다.

NPM
	Node Package Manager의 약자로 다른 프로그래머가 미리 개발하여 올려 둔 패키지를 차아 설치하는 방법을 제공한다. ( Package는 모둘의 모음( 라이브러리 느낌? )

결론: nodejs라는 언어는 
1. 비동기 입출력 기반의 언어이다.
2. 이벤트 기반 입출력을 사용하는 언어이다.
3. 모듈( 파일로 구분 )과 패키지( 모듈의 모음 )를 이용한다.
4. Javascript의 표준을 사용하여 동작하는 언어이다.
